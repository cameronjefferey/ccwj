{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.12", "generated_at": "2024-10-16T21:49:04.716661Z", "invocation_id": "18cbfc01-58d8-479f-80ed-3ac878722270", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-16T21:48:56.478601Z", "completed_at": "2024-10-16T21:48:56.500955Z"}, {"name": "execute", "started_at": "2024-10-16T21:48:56.585383Z", "completed_at": "2024-10-16T21:48:57.495279Z"}], "thread_id": "Thread-1", "execution_time": 1.027745008468628, "adapter_response": {"_message": "CREATE VIEW (0 processed)", "code": "CREATE VIEW", "bytes_processed": 0, "bytes_billed": 0, "location": "US", "project_id": "ccwj-dbt", "job_id": "12d1b53b-5fb1-44ec-8154-102e4f87c613", "slot_ms": 0}, "message": "CREATE VIEW (0 processed)", "failures": null, "unique_id": "model.ccwj.calendar_dates", "compiled": true, "compiled_code": "SELECT day\nFROM UNNEST(\n    GENERATE_DATE_ARRAY(DATE('2020-01-01'), date_add(current_date(),INTERVAL 90 DAY), INTERVAL 1 DAY)\n) AS day", "relation_name": "`ccwj-dbt`.`analytics`.`calendar_dates`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-16T21:48:56.493132Z", "completed_at": "2024-10-16T21:48:56.493138Z"}, {"name": "execute", "started_at": "2024-10-16T21:48:56.502803Z", "completed_at": "2024-10-16T21:49:00.766346Z"}], "thread_id": "Thread-2", "execution_time": 4.296592712402344, "adapter_response": {"_message": "INSERT 9", "code": "INSERT", "rows_affected": 9}, "message": "INSERT 9", "failures": null, "unique_id": "seed.ccwj.0417_current", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-16T21:48:56.500021Z", "completed_at": "2024-10-16T21:48:56.500028Z"}, {"name": "execute", "started_at": "2024-10-16T21:48:56.557768Z", "completed_at": "2024-10-16T21:49:01.156136Z"}], "thread_id": "Thread-4", "execution_time": 4.680976152420044, "adapter_response": {"_message": "INSERT 596", "code": "INSERT", "rows_affected": 596}, "message": "INSERT 596", "failures": null, "unique_id": "seed.ccwj.cflt_prices", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-16T21:48:56.497114Z", "completed_at": "2024-10-16T21:48:56.497128Z"}, {"name": "execute", "started_at": "2024-10-16T21:48:56.547596Z", "completed_at": "2024-10-16T21:49:01.389365Z"}], "thread_id": "Thread-3", "execution_time": 4.9172399044036865, "adapter_response": {"_message": "INSERT 1869", "code": "INSERT", "rows_affected": 1869}, "message": "INSERT 1869", "failures": null, "unique_id": "seed.ccwj.0417_history", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-16T21:49:00.773759Z", "completed_at": "2024-10-16T21:49:00.780303Z"}, {"name": "execute", "started_at": "2024-10-16T21:49:00.781902Z", "completed_at": "2024-10-16T21:49:01.731172Z"}], "thread_id": "Thread-1", "execution_time": 0.9607832431793213, "adapter_response": {"_message": "CREATE VIEW (0 processed)", "code": "CREATE VIEW", "bytes_processed": 0, "bytes_billed": 0, "location": "US", "project_id": "ccwj-dbt", "job_id": "d3604273-7b6a-4716-b3b1-bde2565881f6", "slot_ms": 0}, "message": "CREATE VIEW (0 processed)", "failures": null, "unique_id": "model.ccwj.current", "compiled": true, "compiled_code": "with fix as (\nselect \n    symbol as trade_symbol,\n    split(symbol,\" \")[0] as symbol,\n    split(symbol,\" \")[SAFE_OFFSET(1)] as option_expiration_date,\n    split(symbol,\" \")[SAFE_OFFSET(2)] as option_expiration_price,\n    split(symbol,\" \")[SAFE_OFFSET(3)] as option_security_type,\n    Description,\n    Quantity,\n    Price,\n    price_change_percent,\n    CAST(REGEXP_REPLACE(case \n       when cast(price_change_dollar as  string) LIKE '($%)' THEN CONCAT('-', REPLACE(REPLACE(cast(price_change_dollar as  string), ')', ''), '($', ''))\n       when cast(price_change_dollar as  string) LIKE '$%' THEN REPLACE(REPLACE(cast(price_change_dollar as  string), ')', ''), '$', '')\n       else cast(price_change_dollar as  string)\n    end, r'\\$|,', '') as FLOAT64) as price_change_dollar,\n   CAST(REGEXP_REPLACE(case \n       when cast(market_value as string) LIKE '($%)' THEN CONCAT('-', REPLACE(REPLACE(cast(market_value as string), ')', ''), '($', ''))\n       when cast(market_value as string) LIKE '$%' THEN REPLACE(REPLACE(cast(market_value as string), ')', ''), '$', '')\n       else cast(market_value as string)\n    end, r'\\$|,', '') as FLOAT64) as market_value,\n    day_change_percent,\n    CAST(REGEXP_REPLACE(case \n       when cast(day_change_dollar as string) LIKE '($%)' THEN CONCAT('-', REPLACE(REPLACE(cast(day_change_dollar as string), ')', ''), '($', ''))\n       when cast(day_change_dollar as string) LIKE '$%' THEN REPLACE(REPLACE(cast(day_change_dollar as string), ')', ''), '$', '')\n       else cast(day_change_dollar as string)\n    end, r'\\$|,', '') as FLOAT64) as day_change_dollar,\n    CAST(REGEXP_REPLACE(case \n       when cast(cost_bases as string) LIKE '($%)' THEN CONCAT('-', REPLACE(REPLACE(cast(cost_bases as string), ')', ''), '($', ''))\n       when cast(cost_bases as string) LIKE '$%' THEN REPLACE(REPLACE(cast(cost_bases as string), ')', ''), '$', '')\n       else cast(cost_bases as string)\n    end, r'\\$|,', '') as FLOAT64) as cost_basis,\n    gain_or_loss_percent,\n    CAST(REGEXP_REPLACE(case \n       when cast(gain_or_loss_dollat as string) LIKE '($%)' THEN CONCAT('-', REPLACE(REPLACE(cast(gain_or_loss_dollat as string), ')', ''), '($', ''))\n       when cast(gain_or_loss_dollat as string) LIKE '$%' THEN REPLACE(REPLACE(cast(gain_or_loss_dollat as string), ')', ''), '$', '')\n       else cast(gain_or_loss_dollat as string)\n    end, r'\\$|,', '') as FLOAT64) as gain_or_loss_dollar,\n    rating,\n    divident_reinvestment,\n    is_capital_gain,\n    percent_of_account,\n    expiration_date,\n    cost_per_share,\n    last_earnings_date,\n    dividend_yield,\n    last_dividend,\n    ex_dividend_date,\n    pe_ratio,\n    annual_week_low,\n    annual_week_high,\n    volume,\n    intrinsic_value,\n    in_the_money,\n    security_type,\n    margin_requirement,\n    \nfrom `ccwj-dbt`.`analytics`.`0417_current`\n)\nselect \n    *\nfrom fix \nwhere symbol not in ('Cash & Cash Investments','Account Total')", "relation_name": "`ccwj-dbt`.`analytics`.`current`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-16T21:49:01.397495Z", "completed_at": "2024-10-16T21:49:01.403959Z"}, {"name": "execute", "started_at": "2024-10-16T21:49:01.405372Z", "completed_at": "2024-10-16T21:49:02.274886Z"}], "thread_id": "Thread-2", "execution_time": 0.8808472156524658, "adapter_response": {"_message": "CREATE VIEW (0 processed)", "code": "CREATE VIEW", "bytes_processed": 0, "bytes_billed": 0, "location": "US", "project_id": "ccwj-dbt", "job_id": "38c92917-20ee-46ce-97d6-088d5d108ec5", "slot_ms": 0}, "message": "CREATE VIEW (0 processed)", "failures": null, "unique_id": "model.ccwj.history", "compiled": true, "compiled_code": "with fix as (\nselect \n    date as old_date,\n    cast(coalesce(SAFE.PARSE_DATE('%m/%d/%y',split(date,\" \")[0]),SAFE.PARSE_DATE('%m/%d/%Y',split(date,\" \")[0]))as date) as date,\n    action,\n    \n    symbol as trade_symbol,\n    split(symbol,\" \")[0] as symbol,\n    split(symbol,\" \")[SAFE_OFFSET(1)] as option_expiration_date,\n    split(symbol,\" \")[SAFE_OFFSET(2)] as option_expiration_price,\n    split(symbol,\" \")[SAFE_OFFSET(3)] as option_security_type,\n    case \n        when action in ('Buy','Sell') then 'Equity'\n        when split(symbol,\" \")[SAFE_OFFSET(3)]  = 'C' then 'Option'\n    end as security_type,\n    case \n        when action in ('Assigned','Expired','Buy to Close','Sell to Close') then 'Close' \n        else 'Open'\n    end as trade_type,\n    quantity,\n    price,\n    fees_and_comm,\n    amount as amount_old,\n    CAST(REGEXP_REPLACE(case \n       when cast(amount as string) LIKE '($%)' THEN CONCAT('-', REPLACE(REPLACE(cast(amount as string), ')', ''), '($', ''))\n       when cast(amount as string) LIKE '$%' THEN REPLACE(REPLACE(cast(amount as string), ')', ''), '$', '')\n       when action in ('Expired','Assigned','Journal') then '0'\n       else cast(amount as string)\n    end, r'\\$|,', '') as FLOAT64) as amount\nfrom `ccwj-dbt`.`analytics`.`0417_history`\n)\nselect \n    *\nfrom fix \nwhere symbol in ('CFLT','ONON','JXN','ASTS')\norder by date desc", "relation_name": "`ccwj-dbt`.`analytics`.`history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-16T21:49:01.742109Z", "completed_at": "2024-10-16T21:49:01.749082Z"}, {"name": "execute", "started_at": "2024-10-16T21:49:01.751542Z", "completed_at": "2024-10-16T21:49:02.695129Z"}], "thread_id": "Thread-3", "execution_time": 0.9563791751861572, "adapter_response": {"_message": "CREATE VIEW (0 processed)", "code": "CREATE VIEW", "bytes_processed": 0, "bytes_billed": 0, "location": "US", "project_id": "ccwj-dbt", "job_id": "ce52743e-39d1-4a80-8209-feccd5773776", "slot_ms": 0}, "message": "CREATE VIEW (0 processed)", "failures": null, "unique_id": "model.ccwj.calendar_symbol_dates", "compiled": true, "compiled_code": "with all_symbols as (\nselect distinct symbol\nfrom `ccwj-dbt`.`analytics`.`current`\n)\n\nselect \n    calendar_dates.day,\n    all_symbols.symbol\nfrom `ccwj-dbt`.`analytics`.`calendar_dates`\n    cross join all_symbols", "relation_name": "`ccwj-dbt`.`analytics`.`calendar_symbol_dates`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-16T21:49:02.708159Z", "completed_at": "2024-10-16T21:49:02.725186Z"}, {"name": "execute", "started_at": "2024-10-16T21:49:02.734233Z", "completed_at": "2024-10-16T21:49:03.689520Z"}], "thread_id": "Thread-1", "execution_time": 0.9874851703643799, "adapter_response": {"_message": "CREATE VIEW (0 processed)", "code": "CREATE VIEW", "bytes_processed": 0, "bytes_billed": 0, "location": "US", "project_id": "ccwj-dbt", "job_id": "bf61377c-dd26-4dd0-b2e5-c348e59b45b4", "slot_ms": 0}, "message": "CREATE VIEW (0 processed)", "failures": null, "unique_id": "model.ccwj.current_equity_historical_earnings", "compiled": true, "compiled_code": "with current_holdings as (\nselect \n   distinct symbol\nfrom `ccwj-dbt`.`analytics`.`current`\n)\n, holdings_earnings_historical as (\nselect \n   date,\n   current_holdings.symbol,\n   history.security_type,\n   sum(amount) as gain_or_loss,\nfrom current_holdings \n   join `ccwj-dbt`.`analytics`.`history` \n      on current_holdings.symbol = history.symbol\ngroup by 1,2,3\n)\n, running_earnings_historical as (\nselect \n   date,\n   symbol,\n   security_type,\n   gain_or_loss,\n   sum(gain_or_loss) over (partition by symbol,security_type order by date asc) as running_earnings_historical\nfrom holdings_earnings_historical\nwhere 1=1\n   and security_type = 'Equity'\n)\n, daily_holdings_value as (\nselect \n    symbol,\n    row_number() over (partition by symbol,action,option_security_type order by date) as stock_action_order,\n    date,\n    coalesce(lead(date) over (partition by symbol, option_security_type order by date)-1,current_date()) as next_equity_date,\n    action,\n    case when action = 'Sell' then quantity*-1 else quantity end as quantity,\n    sum(case when action = 'Sell' then quantity*-1 else quantity end) over (partition by symbol,option_security_type order by date) as stock_action_quantity,\nfrom `ccwj-dbt`.`analytics`.`history`\nwhere action in ('Buy','Sell')\norder by date\n)\n, final as (\nselect \n   calendar_symbol_dates.day,\n   calendar_symbol_dates.symbol,\n   daily_holdings_value.stock_action_quantity,\n   running_earnings_historical.gain_or_loss,\n   sum(running_earnings_historical.gain_or_loss) over (partition by calendar_symbol_dates.symbol order by calendar_symbol_dates.day asc) as running_earnings_historical,\n   cflt_prices.close as closing_price\nfrom `ccwj-dbt`.`analytics`.`calendar_symbol_dates` \n   left join running_earnings_historical\n      on running_earnings_historical.date = calendar_symbol_dates.day \n         and running_earnings_historical.symbol = calendar_symbol_dates.symbol \n   left join daily_holdings_value \n      on daily_holdings_value.symbol = calendar_symbol_dates.symbol \n         and daily_holdings_value.date <= calendar_symbol_dates.day \n         and daily_holdings_value.next_equity_date >= calendar_symbol_dates.day \n   left join `ccwj-dbt`.`analytics`.`cflt_prices`\n      on lower(cflt_prices.symbol) = lower(calendar_symbol_dates.symbol)\n         and date(cflt_prices.date) = date(calendar_symbol_dates.day)\nwhere 1=1\n)\nselect \n   day,\n   symbol,\n   running_earnings_historical,\n   stock_action_quantity*closing_price as daily_holdings_value,\n   round(running_earnings_historical+(stock_action_quantity*closing_price),2) as historical_equity_holdings\nfrom final \nwhere 1=1\n   and day BETWEEN '2022-01-01' and current_date()\n   and closing_price is not null \norder by day desc", "relation_name": "`ccwj-dbt`.`analytics`.`current_equity_historical_earnings`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-16T21:49:02.715341Z", "completed_at": "2024-10-16T21:49:02.723558Z"}, {"name": "execute", "started_at": "2024-10-16T21:49:02.726219Z", "completed_at": "2024-10-16T21:49:03.701173Z"}], "thread_id": "Thread-4", "execution_time": 0.9978938102722168, "adapter_response": {"_message": "CREATE VIEW (0 processed)", "code": "CREATE VIEW", "bytes_processed": 0, "bytes_billed": 0, "location": "US", "project_id": "ccwj-dbt", "job_id": "252e3d5a-b60e-4e4e-993b-e9b34fed24b8", "slot_ms": 0}, "message": "CREATE VIEW (0 processed)", "failures": null, "unique_id": "model.ccwj.current_option_historical_earnings", "compiled": true, "compiled_code": "with option_history as (\nselect \n    date,\n    coalesce(lead(date) over (partition by symbol order by date asc)-1,current_date()) as next_option_date,\n    action,\n    symbol,\n    security_type,\n    trade_type,\n    case \n        when action in ('Assigned','Expired','Buy to Close','Sell to Close') then quantity*-1 \n        else quantity\n    end as quantity,\n    amount,\n    row_number() over (partition by symbol,trade_type order by date asc) as order_number,\n    sum(case \n        when action in ('Assigned','Expired','Buy to Close','Sell to Close') then quantity*-1 \n        else quantity\n    end) over (partition by symbol,trade_type order by date asc) as cumulative_sum,\nfrom `ccwj-dbt`.`analytics`.`history`\nwhere 1=1\n    and action in ('Sell to Open','Sell to Close','Buy to Open','Buy to Close','Expired','Assigned')\norder by date desc \n)\n, daily_totals as (\nselect \n    date,\n    symbol,\n    sum(quantity) as total,\n    sum(amount) as amount,\nfrom option_history \ngroup by 1,2\n)\n, cumulative_daily_totals as (\nselect \n    date,\n    symbol,\n    coalesce(lead(date) over (partition by symbol order by date)-1,current_date()) as next_option_date,\n    total,\n    sum(total) over (partition by symbol order by date asc) as cum_total,\n    sum(amount) over (partition by symbol order by date asc) as cum_amount,\nfrom daily_totals\n\n)\n, final as (\nselect \n    calendar_symbol_dates.day,\n    calendar_symbol_dates.symbol,\n    cumulative_daily_totals.cum_total as quantity,\n    cumulative_daily_totals.cum_amount as amount,\nfrom `ccwj-dbt`.`analytics`.`calendar_symbol_dates`\n    join cumulative_daily_totals \n        on cumulative_daily_totals.symbol = calendar_symbol_dates.symbol\n            and date(cumulative_daily_totals.date) <= date(calendar_symbol_dates.day)\n            and date(cumulative_daily_totals.next_option_date) >= date(calendar_symbol_dates.day)\nwhere calendar_symbol_dates.day <= current_date()\norder by calendar_symbol_dates.day desc \n)\nselect *\nfrom final", "relation_name": "`ccwj-dbt`.`analytics`.`current_option_historical_earnings`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-16T21:49:03.712145Z", "completed_at": "2024-10-16T21:49:03.719664Z"}, {"name": "execute", "started_at": "2024-10-16T21:49:03.721974Z", "completed_at": "2024-10-16T21:49:04.628340Z"}], "thread_id": "Thread-3", "execution_time": 0.937385082244873, "adapter_response": {"_message": "CREATE VIEW (0 processed)", "code": "CREATE VIEW", "bytes_processed": 0, "bytes_billed": 0, "location": "US", "project_id": "ccwj-dbt", "job_id": "2d2189a4-068d-46d5-b2a5-2f708d4793c5", "slot_ms": 0}, "message": "CREATE VIEW (0 processed)", "failures": null, "unique_id": "model.ccwj.current_holdings_historical_earnings", "compiled": true, "compiled_code": "with combined as (\nselect \n    'Equity' as security_type,\n    current_equity_historical_earnings.day,\n    current_equity_historical_earnings.symbol,\n    current_equity_historical_earnings.historical_equity_holdings as daily_earnings,\n\nfrom `ccwj-dbt`.`analytics`.`current_equity_historical_earnings`\nUNION ALL \nselect \n    'Options' as security_type,\n    current_option_historical_earnings.day,\n    current_option_historical_earnings.symbol,\n    current_option_historical_earnings.amount as daily_earnings,\n\nfrom `ccwj-dbt`.`analytics`.`current_option_historical_earnings`\n)\nselect *\nfrom combined \nwhere EXTRACT(DAYOFWEEK from day) in (2,3,4,5,6)", "relation_name": "`ccwj-dbt`.`analytics`.`current_holdings_historical_earnings`"}], "elapsed_time": 10.594706773757935, "args": {"profiles_dir": "/Users/cameronsmith/.dbt", "select": ["+current_holdings_historical_earnings+"], "static_parser": true, "project_dir": "/Users/cameronsmith/dbt/ccwj/ccwj", "log_file_max_bytes": 10485760, "resource_types": [], "defer": false, "introspect": true, "printer_width": 80, "invocation_command": "dbt ", "macro_debugging": false, "cache_selected_only": false, "quiet": false, "show": false, "populate_cache": true, "print": true, "log_format": "default", "warn_error_options": {"include": [], "exclude": []}, "send_anonymous_usage_stats": true, "log_level": "info", "use_colors": true, "partial_parse_file_diff": true, "use_colors_file": true, "version_check": true, "partial_parse": true, "log_format_file": "debug", "write_json": true, "strict_mode": false, "include_saved_query": false, "log_level_file": "debug", "favor_state": false, "show_resource_report": false, "target": "dev", "which": "build", "log_path": "/Users/cameronsmith/dbt/ccwj/ccwj/logs", "indirect_selection": "eager", "exclude": [], "enable_legacy_logger": false, "vars": {}}}